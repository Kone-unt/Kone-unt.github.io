{"meta":{"title":"淋过最大的雨","subtitle":"烈日下的不回头","description":null,"author":"Kone","url":"https://blog.konebtbx.com","root":"/"},"pages":[{"title":"","date":"2019-03-17T03:53:51.114Z","updated":"2019-03-17T03:53:51.114Z","comments":false,"path":"categories/index.html","permalink":"https://blog.konebtbx.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-03-17T03:52:54.012Z","updated":"2019-03-17T03:52:54.012Z","comments":false,"path":"tags/index.html","permalink":"https://blog.konebtbx.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"《MDN的HTML入门》中易忽视的知识点","slug":"《MDN的HTML入门》中易忽视的知识点","date":"2019-03-20T15:51:41.000Z","updated":"2019-07-10T09:26:03.973Z","comments":true,"path":"2019/03/20/《MDN的HTML入门》中易忽视的知识点/","link":"","permalink":"https://blog.konebtbx.com/2019/03/20/《MDN的HTML入门》中易忽视的知识点/","excerpt":"","text":"前言本人在阅读《MDN的HTML入门》时，觉得容易让人忽视的知识点，记录在这里，提醒自己注意，也方便以后回来查阅。 坚持，就是在坚持不下去的时候再坚持。 易忽视的知识点1. 空白字符在HTML中无论使用多少个空白（包括空白字符，换行），当HTML渲染的时候，解释器只会渲染一个空格符，以下两行渲染的结果是相同的。 12&lt;p&gt;在这里只有一个 空格&lt;/p&gt;&lt;p&gt;在这里只有很多 空格&lt;/p&gt; &lt;!-- 要渲染出多个空格可使用&amp;nbsp; 或使用&lt;pre&gt; --&gt; 2. 字符引用在HTML中，字符&lt;,&gt;,&quot;,&#39;和&amp;是特殊字符，是HTML语法本身的一部分，如果要在文本中使用这些特殊字符而不被浏览器视为代码并被解释，我们必须使用字符引用——表示字符的特殊编码。(注意下表中的字符引用均无空格，如&amp;和lt之间无空格，只是为了让浏览器不渲染成”&lt;”) 原义字符 等价字符引用 &lt; &amp; lt; &gt; &amp; gt; “ &amp; quot; ‘ &amp; apos; &amp; &amp; amp; 提示: 维基百科上有一个包含所有可用HTML字符实体引用的列表：XML和HTML字符实体引用列表。 3. 超链接至文档片段超链接可以链接到html文档的特定部分（被称为文档片段），而不仅仅是文件的顶部。要做到这一点你必须首先分配一个id属性的元素到链接。通常链接到一个特定的标题是有意义的，所以这看起来像下面的内容： 1&lt;h2 id=\"Mailing_address\"&gt;Mailing address&lt;/h2&gt; 然后链接到那个特定的id，您可以在URL的结尾包含它，前面是一个井号（#），例如： 1234&lt;p&gt; Want to write us a letter? Use our &lt;a href=\"contacts.html#Mailing_address\"&gt;mailing address&lt;/a&gt;.&lt;/p&gt; 你甚至可以用它自己的文档片段参考链接到同一份文件的另一部分： 12345&lt;p&gt; The &lt;a href=\"#Mailing_address\"&gt;company mailing address&lt;/a&gt; can be found at the bottom of this page.&lt;/p&gt; 4. 电子邮件链接当点击一个链接或按钮时，打开一个新的电子邮件发送信息而不是连接到一个资源或页面，这种情况是可能做到的。这样做是使用a元素和mailto：URL的方案。其最基本和最常用的使用形式为一个mailto:link （链接），链接简单说明收件人的电子邮件地址。例如: 1&lt;a href=\"mailto:nowhere@mozilla.org\"&gt;Send email to nowhere&lt;/a&gt; 5. 上标和下标当你使用日期、化学方程式、和数学方程式时会偶尔使用上标和下标。 sup和sub元素可以解决这样的问题。例如： 12&lt;p&gt;咖啡因的化学方程式是 C&lt;sub&gt;8&lt;/sub&gt;H&lt;sub&gt;10&lt;/sub&gt;N&lt;sub&gt;4&lt;/sub&gt;O&lt;sub&gt;2&lt;/sub&gt;。&lt;/p&gt;&lt;p&gt;如果 x&lt;sup&gt;2&lt;/sup&gt; 的值为 9，那么 x 的值必为 3 或 -3。&lt;/p&gt; 这些代码输出的结果是： 咖啡因的化学方程式是C8H10N4O2。 如果 x2 的值为 9，那么 x 的值必为 3 或 -3。 6. 原生表单部件1.通用属性所有的表单元素都有一组属性，可以对表单小部件进行控制，下面是这些通用属性的列表： 属性名称 默认值 描述 autofocus (false) 指定页面加载时元素应该自动具有输入焦点，文档中只有一个元素可以指定这个属性 disabled (false) 这个布尔属性表示用户不能与元素交互 form 小部件与之相关联的表单元素，属性值必须是同一文档中&lt;form&gt;属性的id属性 name 元素的名称，用于表单数据提交 value 元素的初始值 2.单行文本域使用&lt;input&gt;元素创建一个单行文本域，该元素的type属性值设置为text（默认值为text）。单行文本域只有一个真正的约束：如果您输入带有换行符的文本，浏览器在发送数据之前将删除这些换行符。 3.下拉内容a.选择框一个选择框使用&lt;select&gt;元素创建的。其中有一个或多个&lt;option&gt;元素作为子元素，每个元素都指定了其中一个可能的值。 12345&lt;select id=\"simple\" name=\"simple\"&gt; &lt;option&gt;Banana&lt;/option&gt; &lt;option&gt;Cherry&lt;/option&gt; &lt;option&gt;Lemon&lt;/option&gt;&lt;/select&gt; 如果需要可以使用selected属性在所需的option上设置选择框的默认值，然后页面加载后将选择该选项。如果一个option元素设置了value属性，那么当提交表单时该属性的值就会被发送。如果忽略了value属性，则使用option元素的内容作为选择框的值。 b.多选选择框默认情况下，选择框只允许用户选择一个值。通过将multiple属性添加到select元素，您可以允许用户通过操作系统提供的默认机制来选择几个值。 (如， 同时按下 Cmd/Ctrl 并点击多个值). 注意：在多个选项选择框的情况下，选择框不再显示值为下拉内容——相反，它们都显示在一个列表中。 12345&lt;select multiple id=\"multi\" name=\"multi\"&gt; &lt;option&gt;Banana&lt;/option&gt; &lt;option&gt;Cherry&lt;/option&gt; &lt;option&gt;Lemon&lt;/option&gt;&lt;/select&gt; 4.可选中项可选中项是状态可以通过单击它们来更改小部件。有两种可选中项：复选框和单选按钮。两者都使用checked属性，以指示该部件的默认状态: “选中”或”未选中”。 值得注意的是，这些小部件与其他表单小部件不一样。对于大多数表单部件，一旦表单提交，所有具有name属性的小部件都会被发送，即使没有任何值被填。对于可选中项，只有在勾选时才发送它们的值。如果他们没有被勾选，就不会发送任何东西，甚至连他们的名字也没有。 a.复选框使用type属性值为checkbox的input元素来创建一个复选框。 1&lt;input type=\"checkbox\" checked id=\"carrots\" name=\"carrots\" value=\"carrots\"&gt; 包含checked属性使复选框在页面加载时自动被选中。 b.单选按钮使用type属性值为radio的input元素来创建一个单选按钮。 1&lt;input type=\"radio\" checked id=\"soup\" name=\"meal\"&gt; 几个单选按钮可以连接在一起。如果它们的name属性共享相同的值，那么它们将被认为属于同一组的按钮。同一组中只有一个按钮可以同时被选；这意味着当其中一个被选中时，所有其他的都将自动未选中。如果没有选中任何一个，那么整个单选按钮池就被认为处于未知状态，并且没有以表单的形式发送任何值。 7.表单数据校验1.内置表单数据验证HTML5的新功能，不写一行脚本代码的情况下，对用户的输入进行数据校验，这是通过表单元素的检验属性实现的。 当一个元素校验通过时： · 该元素可以通过CSS伪类:valid进行特殊的样式化； · 如果用户尝试提交表单，没有其他控制来阻止该操作（如JavaScript阻止提交），那么表单的数据将会被提交。 当一个元素未校验通过时： · 该元素可以通过CSS伪类:invalid来进行样式化； · 如果用户尝试提交表单，浏览器会展示出错误消息，并停止表单的提交。 required属性添加一个required属性到你的input元素中，使输入成为必须的，当设置此属性时，若输入为空，该表单将不会被提交，而现实错误消息。 12345&lt;form&gt; &lt;label for=\"choose\"&gt;Would you prefer a banana or cherry?&lt;/label&gt; &lt;input id=\"choose\" name=\"i_like\" required&gt; &lt;button&gt;Submit&lt;/button&gt;&lt;/form&gt; 1234567input:invalid &#123; border: 2px dashed red;&#125;input:valid &#123; border: 2px solid black;&#125; 使用正则表达式验证pattern12345&lt;form&gt; &lt;label for=\"choose\"&gt;Would you prefer a banana or a cherry?&lt;/label&gt; &lt;input id=\"choose\" name=\"i_like\" required pattern=\"banana|cherry\"&gt; &lt;button&gt;Submit&lt;/button&gt;&lt;/form&gt;","categories":[],"tags":[{"name":"HTML入门","slug":"HTML入门","permalink":"https://blog.konebtbx.com/tags/HTML入门/"},{"name":"阅读笔记","slug":"阅读笔记","permalink":"https://blog.konebtbx.com/tags/阅读笔记/"}]},{"title":"从零开始搭建Hexo主题个人博客","slug":"从零开始搭建Hexo主题个人博客","date":"2019-03-18T15:01:49.000Z","updated":"2019-03-19T06:46:47.313Z","comments":true,"path":"2019/03/18/从零开始搭建Hexo主题个人博客/","link":"","permalink":"https://blog.konebtbx.com/2019/03/18/从零开始搭建Hexo主题个人博客/","excerpt":"","text":"前言你曾羡慕过那些大佬花里胡哨的个人博客吗？好，没有是吧，不管，反正这是一篇关于如何使用Hexo博客框架搭建属于自己的个人博客，并部署到GitHub上的详细实操教程，废话不多说，让我们开始吧！ 环境要求 GitHub Nodejs Hexo 一、安装Git前往Git下载页面选择自己的系统安装对应的版本即可。安装完成后可以通过鼠标右键菜单了看到Git GUi Here和git Bash Here，说明安装成功啦！ 安装Git 二、安装NodeJs前往nodejs下载页面选择对应系统的安装程序即可。安装过程均选择默认下一步就可以迅速的安装好。 安装NodeJs 三、安装Hexo在你未来搭建博客的文件夹下（如我个人的路径：E:\\MYBLOG），右键选择Git Bash Here打开git控制台，输入命令在全局安装Hexo博客搭建工具: $ npm install -g hexo-cli 等待安装完成后，在命令行中输入hexo version能显示出Hexo的版本号说明安装成功。 安装Hexo 本地搭建博客一、初始化博客在博客根目录下（如我个人的路径：E:\\MYBLOG），运行Hexo初始化命令，其中folder为你指定初始化的文件夹名称： $ hexo init &lt;folder&gt; $ cd &lt;folder&gt; $ npm install 初始化完成之后，可以发现指定的文件夹下多了许多文件，目录如下： . ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes 具体每个文件夹以及文件的作用可参考Hexo官方文档。 二、本地运行博客在博客根目录下，运行命令hexo generate（缩写为hexo g）生成博客网站的静态文件，运行命令完成后，在目录下会发现多了一个public的文件夹；接着运行命令hexo server（缩写为hexo s）在本地启动服务器运行博客。 启动服务器 服务器默认情况下，访问网址为：http://localhost:4000/ 在浏览器中打开查看效果： 本地博客效果 将本地博客部署到GitHub一、注册GitHub账号（已有账号的跳过此步骤）前往GitHub官网，点击右上角的Sign up 按步骤填写注册账号。 二、创建GitHub仓库1.点击右上角+号，选择New repository新建仓库。 2.按下图填写，其中Repository Name自己按喜好填写，将用于访问你的个人博客。 创建仓库 三、配置SSH连接1.首先查看你要先看看你的本机是否存在SSH keys，方法： $ cd ~/.ssh 查看本机用户目录下是否有.ssh文件夹，若有跳过第2步，进行第3步。 2.生成ssh密钥，在命令行输入： $ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 生成完密钥后，输入命令，查看生成的密钥并复制下来： $ cat ~/.ssh/id_rsa.pub 3.在GitHub上选择 头像 &gt;&gt; Settings &gt;&gt; SSH and GPG keys &gt;&gt; New SSH key，然后将第2步复制的ssh key粘贴进去，点保存即可。 添加SSH keys 4.设置用户信息 $ git config --global user.name &quot;your_name&quot; //用户名 $ git config --global user.email &quot;your_email@expamle.com&quot; //邮箱 至此，ssh连接配置就完成了，可以与GitHub进行连接了。 四、将本地的Hexo文件上传至GitHub1.打开刚刚创建的仓库，复制地址链接。 复制链接 2.打开博客根目录（如我个人的目录为：E:\\MYBLOG\\Hexo），找到配置文件_config.yml并打开，滚动到最后deploy项： 配置_config.yml 3.在博客根目录下运行命令，安装hexo部署到git的插件，之后运行hexo generate和hexo deploy（缩写为hexo g -d）。 $ npm install hexo-deployer-git --save $ hexo generate $ hexo deploy 至此，你的博客就已经部署到github服务器上了，可以通过GitHub地址（为你的&lt;仓库名&gt;.github.io）访问自己的博客啦！ 结语 让自己变成一个精神富有的人最有效的方法——做一点儿看似无用的事。 配置过程有点繁琐，当你一步一步的做下来，可能有点心累，但有耐心完成下来还是成就满满的啦，撒花撒花~","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.konebtbx.com/tags/Hexo/"},{"name":"环境搭建","slug":"环境搭建","permalink":"https://blog.konebtbx.com/tags/环境搭建/"}]},{"title":"Markdown 高级语法","slug":"Markdown-高级语法","date":"2019-03-18T05:50:15.000Z","updated":"2019-03-18T07:46:32.059Z","comments":true,"path":"2019/03/18/Markdown-高级语法/","link":"","permalink":"https://blog.konebtbx.com/2019/03/18/Markdown-高级语法/","excerpt":"","text":"Cmd Markdown 高级语法1.内容目录在段落中填写@[TOC]来显示全文的内容目录结构。(当前的Markdown渲染引擎不支持) [TOC] 2.删除线使用~~表示删除线。 例如：这个商品原价199，现价9.9 3.注脚使用[^keyword]表示注脚。 例如：详情请见参考1[^1] 4.LateX公式$表示行内的公式 例如：质能守恒方程的方程式为$E=mc^2​$。 $$表示整行公式： $$\\sum_{i=1}^n a_i=0​$$ $$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ 访问 MathJax 参考更多使用方法。 5.加强的代码块支持四十多种编程语言的语法高亮显示，行号显示。 非代码示例： 1sudo npm install hexo Python代码块示例： 123456789101112@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' JavaScript代码块示例： 12345678910111213141516/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/function fib(n) &#123; var a = 1, b = 1; var tmp; while (--n &gt;= 0) &#123; tmp = a; a += b; b = tmp; &#125; return a;&#125;document.write(fib(10)); 6.流程图示例： 更多语法参考：流程图语法参考 7.表格 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 8.待办事宜TODO列表使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如： - [ ] **Cmd Markdown 开发** - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 - [ ] 支持以 PDF 格式导出文稿 - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) - [x] 改进 LaTex 功能 - [x] 修复 LaTex 公式渲染问题 - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers) - [ ] **七月旅行准备** - [ ] 准备邮轮上需要携带的物品 - [ ] 浏览日本免税店的物品 - [x] 购买蓝宝石公主号七月一日的船票 对应显示如下待办事宜 Todo 列表： Cmd Markdown 开发 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 支持以 PDF 格式导出文稿 新增Todo列表功能 语法参考 改进 LaTex 功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 语法参考 七月旅行准备 准备邮轮上需要携带的物品 浏览日本免税店的物品 购买蓝宝石公主号七月一日的船票 [^1]: 这是一个 注脚 的 参考1。 [^2]: 这是另一个 注脚 的 参考2。st=>start: Start:>https://www.zybuluo.com io=>inputoutput: verification op=>operation: Your Operation cond=>condition: Yes or No? sub=>subroutine: Your Subroutine e=>end st->io->op->cond cond(yes)->e cond(no)->sub->io{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://blog.konebtbx.com/tags/Markdown/"}]},{"title":"Markdown 入门语法","slug":"Markdown-入门语法","date":"2019-03-17T15:35:52.000Z","updated":"2019-03-19T06:51:20.583Z","comments":true,"path":"2019/03/17/Markdown-入门语法/","link":"","permalink":"https://blog.konebtbx.com/2019/03/17/Markdown-入门语法/","excerpt":"Markdown是个什么玩意？Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。 说了一堆废话，反正就是能够用比较装逼的方式写文章拉，还有点小优雅~ 本文使用的编辑器叫Typora，有兴趣的可以前往官网下载，Typora官网","text":"Markdown是个什么玩意？Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。 说了一堆废话，反正就是能够用比较装逼的方式写文章拉，还有点小优雅~ 本文使用的编辑器叫Typora，有兴趣的可以前往官网下载，Typora官网 Cmd Markdown 简明语法手册1.斜体和粗体使用*和**表示斜体和粗体。 例如：斜体的SB, 粗体的SB 快捷键：ctrl+I斜体，ctrl+B粗体 2.分级标题在行首使用#的数量来表示不同级别的标题，例如# H1 ，## H2。 快捷键：ctrl+1，ctrl+2 3.超链接使用格式[描述]（链接地址）为文字增加超链接。 例如：[百度](www.baidu.com) 效果：百度 4.无序列表使用*，+，-表示无序列表。 例如： 无序列表1 无序列表2 无序列表3 5.文字引用使用 &gt; 表示文字引用。 例如： 甘苦与共，是浮生茶，也是人生路 6.行内代码块使用代码块表示行内代码块。 例如：我在学Markdown 7.代码块行首使用四个空格来表示代码块。 例如： 我是一个代码块，我的行首有4个空格。 8.插入图片使用![描述](图片链接地址)来插入图像。 例如：![刺客五六七](/images/kiss.jpg)，效果如下： 刺客五六七","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://blog.konebtbx.com/tags/Markdown/"}]}]}